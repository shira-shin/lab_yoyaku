generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL") // runtime（pooler 可）
  directUrl = env("DIRECT_URL") // migrate/generate（Direct 必須）
}

enum DeviceManagePolicy {
  HOST_ONLY
  MEMBERS_ALLOWED
}

enum DutyManagePolicy {
  ADMINS_ONLY
  MEMBERS_ALLOWED
}

enum DutyVisibility {
  PUBLIC
  MEMBERS_ONLY
}

enum DutyKind {
  DAY_SLOT
  TIME_RANGE
}

enum GroupMemberRole {
  OWNER
  ADMIN
  MEMBER
}

model User {
  id              String    @id @default(cuid())
  name            String?
  email           String?
  normalizedEmail String    @unique
  passwordHash    String?
  emailVerified   DateTime?
  image           String?

  accounts            Account[]
  sessions            Session[]
  passwordResetTokens PasswordResetToken[]
  reservations        Reservation[]
  groupMembers        GroupMember[]
  dutyAssignments     DutyAssignment[]

  @@map("User") // 大文字テーブル名を明示
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("Account")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("Session")
}

model PasswordResetToken {
  id        String    @id @default(cuid())
  userId    String
  tokenHash String    @unique
  expiresAt DateTime
  usedAt    DateTime?
  createdAt DateTime  @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("PasswordResetToken")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("VerificationToken")
}

model Group {
  id                 String             @id @default(cuid())
  slug               String             @unique
  name               String?
  passcode           String?
  hostEmail          String
  reserveFrom        DateTime?
  reserveTo          DateTime?
  memo               String?
  deviceManagePolicy DeviceManagePolicy @default(HOST_ONLY)
  dutyManagePolicy   DutyManagePolicy   @default(ADMINS_ONLY)
  createdAt          DateTime           @default(now())

  devices         Device[]
  members         GroupMember[]
  dutyTypes       DutyType[]
  dutyAssignments DutyAssignment[]

  @@map("Group")
}

model GroupMember {
  id        String          @id @default(cuid())
  groupId   String
  email     String
  userId    String?
  role      GroupMemberRole @default(MEMBER)
  createdAt DateTime        @default(now())

  group Group @relation(fields: [groupId], references: [id], onDelete: Cascade)
  user  User? @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@unique([groupId, email])
  @@map("GroupMember")
}

model Device {
  id        String   @id @default(cuid())
  slug      String
  name      String
  caution   String?
  code      String?
  /// 32 文字の MD5 を DB 側で生成（Neon 正規化式）
  qrToken   String   @db.VarChar(32) @unique @default(dbgenerated("md5(((random())::text || (clock_timestamp())::text))"))
  groupId   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  group        Group         @relation(fields: [groupId], references: [id], onDelete: Cascade)
  reservations Reservation[]

  @@unique([groupId, slug])
  @@map("Device")
}

model Reservation {
  id              String   @id @default(cuid())
  deviceId        String
  userEmail       String
  userId          String?
  userName        String?
  start           DateTime
  end             DateTime
  purpose         String?
  reminderMinutes Int?
  createdAt       DateTime @default(now())

  device Device @relation(fields: [deviceId], references: [id], onDelete: Cascade)
  user   User?  @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@index([deviceId, start])
  @@index([start, end])
  @@map("Reservation")
}

model UserProfile {
  email       String   @id
  displayName String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("UserProfile")
}

model DutyType {
  id         String         @id @default(cuid())
  groupId    String
  name       String
  color      String         @default("#7c3aed")
  visibility DutyVisibility @default(PUBLIC)
  kind       DutyKind       @default(DAY_SLOT)

  group       Group            @relation(fields: [groupId], references: [id], onDelete: Cascade)
  rules       DutyRule[]
  assignments DutyAssignment[]

  @@unique([groupId, name])
  @@map("DutyType")
}

model DutyRule {
  id               String   @id @default(cuid())
  typeId           String
  startDate        DateTime
  endDate          DateTime
  byWeekday        Int[]    @default([])
  slotsPerDay      Int      @default(1)
  includeMemberIds String[] @default([])
  excludeMemberIds String[] @default([])
  avoidConsecutive Boolean  @default(true)
  startTime        String?
  endTime          String?
  disabled         Boolean  @default(false)

  type DutyType @relation(fields: [typeId], references: [id], onDelete: Cascade)

  @@map("DutyRule")
}

model DutyAssignment {
  id         String    @id @default(cuid())
  typeId     String
  groupId    String
  date       DateTime
  slotIndex  Int       @default(0)
  assigneeId String?
  locked     Boolean   @default(false)
  done       Boolean   @default(false)
  startsAt   DateTime?
  endsAt     DateTime?

  type     DutyType @relation(fields: [typeId], references: [id], onDelete: Cascade)
  group    Group    @relation(fields: [groupId], references: [id], onDelete: Cascade)
  assignee User?    @relation(fields: [assigneeId], references: [id], onDelete: SetNull)

  @@unique([groupId, typeId, date, slotIndex])
  @@map("DutyAssignment")
}
